security:

    enable_authenticator_manager: true
    
    # Password hashers configuration
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    # User providers configuration


    providers:
        app_user_provider:
            entity:
                class: App\Entity\User # The class representing the user entity
                property: email # The property used to identify the user (email in this case)
        
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/ # Pattern to match development-related routes
            security: false # Disable security for these routes           
            
            
        main:
            pattern: ^/api # All routes starting with /api
            stateless: true # Do not use sessions
            provider: app_user_provider # Specify the user provider to use (for database users)

            # JSON login configuration
            json_login:
                check_path: /api/login_check # Endpoint for login requests
                success_handler: lexik_jwt_authentication.handler.authentication_success # Handler on successful login
                failure_handler: lexik_jwt_authentication.handler.authentication_failure # Handler on failed login
        jwt: ~ #enable JWT authentication.           


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:       
        # Allow anonymous access to the login endpoint
        - { path: ^/api/login_check$, roles: PUBLIC_ACCESS }
        
        # Require full authentication for all other API endpoints
        # - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
